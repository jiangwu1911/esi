diff --git a/common/common.pro b/common/common.pro
index b853bbc..809c952 100644
--- a/common/common.pro
+++ b/common/common.pro
@@ -21,7 +21,8 @@ SOURCES += \
     exception.cpp \
     logging.cpp \
     options.cpp \
-    process.cpp
+    process.cpp \
+    sharedmemory.cpp
 
 HEADERS += \
     common_global.h \
@@ -29,7 +30,8 @@ HEADERS += \
     global.h \
     logging.h \
     options.h \
-    process.h
+    process.h \
+    sharedmemory.h
 
 # Default rules for deployment.
 unix {
diff --git a/common/exception.h b/common/exception.h
index 73ff90a..d1668f7 100644
--- a/common/exception.h
+++ b/common/exception.h
@@ -2,11 +2,12 @@
 #define EXCEPTION_H
 
 #include "global.h"
+#include "common_global.h"
 #include <QException>
 
 BEGIN_NAMESPACE_ESI
 
-class Exception : public QException {
+class COMMON_EXPORT Exception : public QException {
 public:
     explicit Exception(const char *errorString);
     explicit Exception(const QString &errorString);
diff --git a/common/logging.cpp b/common/logging.cpp
index c3d1dca..b71f169 100644
--- a/common/logging.cpp
+++ b/common/logging.cpp
@@ -8,6 +8,9 @@
 
 BEGIN_NAMESPACE_ESI
 
+int m_logLevel;
+static QScopedPointer<QFile> m_logFile;
+
 void initlog(const QString &filename, const bool clearOldLogs) {
     m_logLevel = LEVEL_INFO;
     m_logFile.reset(new QFile(filename.simplified()));
diff --git a/common/logging.h b/common/logging.h
index 1fa97e1..440438b 100644
--- a/common/logging.h
+++ b/common/logging.h
@@ -13,9 +13,6 @@ BEGIN_NAMESPACE_ESI
 #define LEVEL_CRITICAL 2
 #define LEVEL_FATAL 1
 
-static int m_logLevel;    // qDebug will not write log file by default
-static QScopedPointer<QFile> m_logFile;
-
 void initlog(const QString &logfile, const bool clearOldLogs = false);
 void messageHandler(QtMsgType type, const QMessageLogContext &context, const QString &message);
 void setLogLevel(int logLevel);
diff --git a/common/process.h b/common/process.h
index 09e2f93..e870fc7 100644
--- a/common/process.h
+++ b/common/process.h
@@ -2,6 +2,7 @@
 #define PROCESS_H
 
 #include "global.h"
+#include "common_global.h"
 #include <QString>
 #include <QObject>
 #include <QProcessEnvironment>
@@ -11,7 +12,7 @@ BEGIN_NAMESPACE_ESI
 void signalHandler(int sig);
 void initDaemon(const QString &runningDir, const QString &lockFile);
 
-class HostProcess : public QObject {
+class COMMON_EXPORT HostProcess : public QObject {
     Q_OBJECT
 
 public:
diff --git a/common/sharedmemory.cpp b/common/sharedmemory.cpp
new file mode 100644
index 0000000..71bc701
--- /dev/null
+++ b/common/sharedmemory.cpp
@@ -0,0 +1,66 @@
+#include <QDataStream>
+#include <QDebug>
+#include "sharedmemory.h"
+#include "exception.h"
+
+BEGIN_NAMESPACE_ESI
+
+const size_t SharedMemory::IMAGE_AREA_SIZE = 1024000;
+
+SharedMemory::SharedMemory() :
+    m_memoryForImage("EsiImage") {
+}
+
+int SharedMemory::create(QSharedMemory &shm, int size) {
+    QString key = shm.nativeKey();
+    qDebug() << "Shared memory's native key is" << key;
+
+    if (shm.attach()) {
+        // Shared memory already exists
+        shm.detach();
+    } else {
+        if (!shm.create(size)) {
+            qCritical() << shm.error() << shm.errorString();
+            throw Exception("Cannot create shared memory.");
+        }
+    }
+    return(0);
+}
+
+int SharedMemory::createAll() {
+    create(m_memoryForImage, IMAGE_AREA_SIZE);
+    return(0);
+}
+
+int SharedMemory::attach(QSharedMemory &shm) {
+    if (!shm.attach(QSharedMemory::ReadWrite)) {
+        qWarning() << "Cannot attach shared memory";
+        qWarning() << shm.error() << shm.errorString();
+        return(-1);
+    }
+    return(0);
+}
+
+int SharedMemory::attachAll() {
+    attach(m_memoryForImage);
+    return(0);
+}
+
+int SharedMemory::saveImage(QBuffer &buffer) {
+    m_memoryForImage.lock();
+    int size = buffer.size();
+    char *to = (char *)m_memoryForImage.data();
+    const char *from = buffer.data().data();
+    memcpy(to, from, qMin(m_memoryForImage.size(), size));
+    m_memoryForImage.unlock();
+    return 0;
+}
+
+int SharedMemory::loadImage(QBuffer &buffer) {
+    m_memoryForImage.lock();
+    buffer.setData((char *)m_memoryForImage.constData(), m_memoryForImage.size());
+    m_memoryForImage.unlock();
+    return 0;
+}
+
+END_NAMESPACE_ESI
diff --git a/common/sharedmemory.h b/common/sharedmemory.h
new file mode 100644
index 0000000..a6f953d
--- /dev/null
+++ b/common/sharedmemory.h
@@ -0,0 +1,32 @@
+#ifndef ESI_SHAREDMEMORY_H
+#define ESI_SHAREDMEMORY_H
+
+#include <QString>
+#include <QBuffer>
+#include <memory>
+#include <QSharedMemory>
+#include "common_global.h"
+#include "global.h"
+
+BEGIN_NAMESPACE_ESI
+
+class COMMON_EXPORT SharedMemory {
+public:
+    SharedMemory();
+    int createAll();
+    int attachAll();
+    int saveImage(QBuffer &buffer);
+    int loadImage(QBuffer &buffer);
+
+private:
+    QSharedMemory m_memoryForImage;
+    const static size_t IMAGE_AREA_SIZE;
+
+private:
+    int create(QSharedMemory &shm, int size);
+    int attach(QSharedMemory &shm);
+};
+
+END_NAMESPACE_ESI
+
+#endif // ESI_SHAREDMEMORY_H
diff --git a/esi.pro b/esi.pro
index d45c373..0e71327 100644
--- a/esi.pro
+++ b/esi.pro
@@ -3,8 +3,10 @@ TEMPLATE = subdirs
 SUBDIRS += \
     common \
     common_test \
+    img \
     mgr \
     us
 
 mgr.depends = common
 us.depends = common
+img.depends = common
diff --git a/img/img.pro b/img/img.pro
new file mode 100644
index 0000000..f77f5f7
--- /dev/null
+++ b/img/img.pro
@@ -0,0 +1,30 @@
+QT       += core gui
+
+greaterThan(QT_MAJOR_VERSION, 4): QT += widgets
+
+CONFIG += c++11
+
+# You can make your code fail to compile if it uses deprecated APIs.
+# In order to do so, uncomment the following line.
+#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0
+
+SOURCES += \
+    main.cpp \
+    mainwindow.cpp
+
+HEADERS += \
+    mainwindow.h
+
+FORMS += \
+    mainwindow.ui
+
+# Default rules for deployment.
+unix {
+    target.path = /opt/esi/bin
+}
+!isEmpty(target.path): INSTALLS += target
+
+LIBS += -L$$OUT_PWD/../common/ -lcommon
+INCLUDEPATH += $$PWD/../common
+DEPENDPATH += $$PWD/../common
+
diff --git a/img/main.cpp b/img/main.cpp
new file mode 100644
index 0000000..58fac1f
--- /dev/null
+++ b/img/main.cpp
@@ -0,0 +1,44 @@
+#include "mainwindow.h"
+#include <QApplication>
+#include "global.h"
+#include "options.h"
+#include <QDebug>
+#include "sharedmemory.h"
+
+USE_NAMESPACE_ESI
+
+void setUsOptions(__attribute__((unused)) QCommandLineParser &parser) {
+}
+
+void processUsOptions(__attribute__((unused)) QCommandLineParser &parser) {
+}
+
+void handleCommandlineOptions(QCoreApplication &app, QCommandLineParser &parser) {
+    setCommonOptions(parser);
+    setUsOptions(parser);
+
+    parser.process(app);
+
+    processCommonOptions(parser);
+    processUsOptions(parser);
+}
+
+int main(int argc, char *argv[]) {
+    QApplication app(argc, argv);
+
+    QCoreApplication::setApplicationName("us");
+    QCoreApplication::setApplicationVersion("0.1");
+
+    QCommandLineParser parser;
+    parser.setApplicationDescription("UltraSound");
+    handleCommandlineOptions(app, parser);
+    qInfo() << QCoreApplication::applicationName() << "begin to run...";
+
+    SharedMemory sharedmemory;
+    sharedmemory.attachAll();
+
+    MainWindow w;
+    w.setWindowTitle(QCoreApplication::applicationName() + " " + QCoreApplication::applicationVersion());
+    w.show();
+    return app.exec();
+}
diff --git a/img/mainwindow.cpp b/img/mainwindow.cpp
new file mode 100644
index 0000000..0c0a392
--- /dev/null
+++ b/img/mainwindow.cpp
@@ -0,0 +1,53 @@
+#include "mainwindow.h"
+#include "ui_mainwindow.h"
+#include <QBuffer>
+#include "sharedmemory.h"
+
+USE_NAMESPACE_ESI
+
+MainWindow::MainWindow(QWidget *parent)
+    : QMainWindow(parent) {
+    initUI();
+}
+
+MainWindow::~MainWindow() {
+}
+
+void MainWindow::initUI() {
+    this->resize(640, 480);
+
+    fileMenu = menuBar()->addMenu("&Load");
+
+    imageScene = new QGraphicsScene(this);
+    imageView = new QGraphicsView(imageScene);
+    setCentralWidget(imageView);
+
+    createActions();
+}
+
+void MainWindow::createActions() {
+    // create actions, add them to menus
+    loadAction = new QAction("&Load", this);
+    fileMenu->addAction(loadAction);
+    connect(loadAction, SIGNAL(triggered(bool)), this, SLOT(loadImageFromSharedMemory()));
+}
+
+void MainWindow::loadImageFromSharedMemory(QPixmap &image) {
+    QBuffer buffer;
+    QDataStream in(&buffer);
+
+    SharedMemory sharedmemory;
+    sharedmemory.loadImage(buffer);
+
+    buffer.open(QBuffer::ReadOnly);
+    in >> image;
+    showImage(image);
+}
+
+void MainWindow::showImage(QPixmap &image) {
+    imageScene->clear();
+    imageView->resetTransform();
+    imageScene->addPixmap(image);
+    imageScene->update();
+    imageView->setSceneRect(image.rect());
+}
diff --git a/img/mainwindow.h b/img/mainwindow.h
new file mode 100644
index 0000000..fe84cc7
--- /dev/null
+++ b/img/mainwindow.h
@@ -0,0 +1,27 @@
+#ifndef MAINWINDOW_H
+#define MAINWINDOW_H
+
+#include <QMainWindow>
+#include <QGraphicsView>
+
+class MainWindow : public QMainWindow {
+    Q_OBJECT
+public:
+    MainWindow(QWidget *parent = nullptr);
+    ~MainWindow();
+
+private:
+    void initUI();
+    void createActions();
+    void loadImageFromSharedMemory(QPixmap &image);
+
+private:
+    QMenu *fileMenu;
+    QGraphicsScene *imageScene;
+    QGraphicsView *imageView;
+    QAction *loadAction;
+
+private slots:
+    void showImage(QPixmap &image);
+};
+#endif // MAINWINDOW_H
diff --git a/img/mainwindow.ui b/img/mainwindow.ui
new file mode 100644
index 0000000..b232854
--- /dev/null
+++ b/img/mainwindow.ui
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>MainWindow</class>
+ <widget class="QMainWindow" name="MainWindow">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>800</width>
+    <height>600</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>MainWindow</string>
+  </property>
+  <widget class="QWidget" name="centralwidget"/>
+  <widget class="QMenuBar" name="menubar"/>
+  <widget class="QStatusBar" name="statusbar"/>
+ </widget>
+ <resources/>
+ <connections/>
+</ui>
diff --git a/mgr/main.cpp b/mgr/main.cpp
index c3f4713..2984d9e 100644
--- a/mgr/main.cpp
+++ b/mgr/main.cpp
@@ -7,7 +7,10 @@
 #include "logging.h"
 #include "options.h"
 #include "process.h"
+#include "sharedmemory.h"
+#include "exception.h"
 #include <unistd.h>
+#include <iostream>
 
 USE_NAMESPACE_ESI
 
@@ -29,32 +32,34 @@ void handleCommandlineOptions(QCoreApplication &app, QCommandLineParser &parser)
     processMgrOptions(parser);
 }
 
-void startUsProcess() {
-    HostProcess *usProcess = new HostProcess("us");
-    usProcess->setWorkingDirectory(QCoreApplication::applicationDirPath());
-
-    QString command = "us";
-    QStringList args;
-    args << "-l" << "5"
-         << "-o" << "us.log";
-    usProcess->start(command, args);
-    processList.append(usProcess);
+void initSharedMemory() {
+    SharedMemory *sharedmemory = new SharedMemory();
+    sharedmemory->createAll();
 }
 
-void startTestProcess() {
-    HostProcess *testProcess = new HostProcess("test");
-    testProcess->setWorkingDirectory(QCoreApplication::applicationDirPath());
-
-    QString command = "ls";
-    QStringList args;
-    args << "-l";
-    testProcess->start(command, args);
-    processList.append(testProcess);
-}
+class Application {
+public:
+    QString m_name;
+    QString m_command;
+    QStringList m_args;
+public:
+    Application(const QString &name, const QString &command, const QStringList &args) :
+        m_name(name), m_command(command), m_args(args) {
+    }
+};
 
 void startProcesses() {
-    startTestProcess();
-    startUsProcess();
+    QVector<Application> appList;
+    appList.append(Application("us", "us", QStringList() << "-1" << "5" << "-o" << "us.log"));
+    appList.append(Application("img", "img", QStringList() << "-1" << "5" << "-o" << "us.log"));
+
+    for (int i = 0; i < appList.size(); i++) {
+        Application app = appList.at(i);
+        HostProcess *p = new HostProcess(app.m_name);
+        p->setWorkingDirectory(QCoreApplication::applicationDirPath());
+        p->start(app.m_command, app.m_args);
+        processList.append(p);
+    }
 }
 
 int main(int argc, char *argv[]) {
@@ -67,9 +72,10 @@ int main(int argc, char *argv[]) {
     QCommandLineParser parser;
     parser.setApplicationDescription("Manager");
     handleCommandlineOptions(app, parser);
-
     qInfo() << QCoreApplication::applicationName() << "begin to run...";
 
+    initSharedMemory();
+
     startProcesses();
 
     return app.exec();
diff --git a/us/main.cpp b/us/main.cpp
index 123fe16..7eb4b01 100644
--- a/us/main.cpp
+++ b/us/main.cpp
@@ -3,6 +3,7 @@
 #include <QApplication>
 #include <QCommandLineParser>
 #include <QDebug>
+#include "sharedmemory.h"
 #include "global.h"
 #include "options.h"
 
@@ -33,9 +34,11 @@ int main(int argc, char *argv[]) {
     QCommandLineParser parser;
     parser.setApplicationDescription("UltraSound");
     handleCommandlineOptions(app, parser);
-
     qInfo() << QCoreApplication::applicationName() << "begin to run...";
 
+    SharedMemory sharedmemory;
+    sharedmemory.attachAll();
+
     MainWindow w;
     w.setWindowTitle(QCoreApplication::applicationName() + " " + QCoreApplication::applicationVersion());
     w.show();
diff --git a/us/mainwindow.cpp b/us/mainwindow.cpp
new file mode 100644
index 0000000..6522e94
--- /dev/null
+++ b/us/mainwindow.cpp
@@ -0,0 +1,70 @@
+#include "mainwindow.h"
+#include <QMenuBar>
+#include <QGraphicsView>
+#include <QFileDialog>
+#include "sharedmemory.h"
+
+USE_NAMESPACE_ESI
+
+MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent) {
+    initUI();
+}
+
+MainWindow::~MainWindow() {
+}
+
+void MainWindow::initUI() {
+    this->resize(640, 480);
+    // setup menubar
+    fileMenu = menuBar()->addMenu("&File");
+
+    imageScene = new QGraphicsScene(this);
+    imageView = new QGraphicsView(imageScene);
+    setCentralWidget(imageView);
+
+    createActions();
+}
+
+void MainWindow::createActions() {
+
+    // create actions, add them to menus
+    openAction = new QAction("&Open", this);
+    fileMenu->addAction(openAction);
+    connect(openAction, SIGNAL(triggered(bool)), this, SLOT(openImage()));
+}
+
+void MainWindow::saveImageToSharedMemory(QPixmap &image) {
+    QBuffer buffer;
+    buffer.open(QBuffer::ReadWrite);
+    QDataStream out(&buffer);
+    out << image;
+
+    SharedMemory sharedmemory;
+    sharedmemory.saveImage(buffer);
+}
+
+void MainWindow::openImage() {
+    QFileDialog dialog(this);
+    dialog.setWindowTitle("Open Image");
+    dialog.setFileMode(QFileDialog::ExistingFile);
+    dialog.setNameFilter(tr("Images (*.png *.bmp *.jpg)"));
+
+    QStringList filePaths;
+    if (dialog.exec()) {
+        filePaths = dialog.selectedFiles();
+        showImage(filePaths.at(0));
+    }
+}
+
+void MainWindow::showImage(QString path) {
+    imageScene->clear();
+    imageView->resetTransform();
+
+    QPixmap image(path);
+    imageScene->addPixmap(image);
+    imageScene->update();
+    imageView->setSceneRect(image.rect());
+
+    saveImageToSharedMemory(image);
+}
+
diff --git a/us/mainwindow.h b/us/mainwindow.h
new file mode 100644
index 0000000..0f69ec8
--- /dev/null
+++ b/us/mainwindow.h
@@ -0,0 +1,29 @@
+#ifndef MAINWINDOW_H
+#define MAINWINDOW_H
+
+#include <QMainWindow>
+#include <QGraphicsScene>
+
+class MainWindow : public QMainWindow {
+    Q_OBJECT
+public:
+    explicit MainWindow(QWidget *parent = nullptr);
+    ~MainWindow();
+
+private:
+    void initUI();
+    void createActions();
+    void saveImageToSharedMemory(QPixmap &image);
+
+private:
+    QMenu *fileMenu;
+    QGraphicsScene *imageScene;
+    QGraphicsView *imageView;
+    QAction *openAction;
+
+private slots:
+    void showImage(QString);
+    void openImage();
+};
+
+#endif // MAINWINDOW_H
diff --git a/us/us.pro b/us/us.pro
index 504617b..5b562c8 100644
--- a/us/us.pro
+++ b/us/us.pro
@@ -15,8 +15,7 @@ SOURCES += \
 HEADERS += \
     mainwindow.h
 
-FORMS += \
-    mainwindow.ui
+FORMS +=
 
 # Default rules for deployment.
 unix {
